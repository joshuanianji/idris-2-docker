name: Build and Test a Single Version

on:
  workflow_call:
    inputs:
      idris-version:
        required: true
        type: string

# Don't allow us to read from packages
permissions:
  contents: read

jobs:
  base-build:
    name: Build Base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      # mainly just for caching purposes - makes it faster to build later on
      # build in arm (or my oracle server) as well so we can make the most use of our time in the build step
      - name: Build
        uses: ./.github/actions/build-image
        with:
          build-arm: true
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh_user: ${{ secrets.SSH_USER }}
          ssh_ip: ${{ secrets.SSH_IP }}
          version: ${{ inputs.idris-version }}
          dockerfile: base
          repo: ${{ github.repository }}

  base-test-1:
    name: Test 1 Base
    runs-on: ubuntu-latest
    needs: base-build
    env:
      TAG: idris-base-${{ inputs.idris-version }}:test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      # mainly just for caching purposes - makes it faster to build later on
      - name: Build
        uses: ./.github/actions/build-image
        with:
          version: ${{ inputs.idris-version }}
          dockerfile: base
          repo: ${{ github.repository }}
          tag: ${{ env.TAG }}
      
      - name: Run `docker image ls`
        run: docker image ls
      
      - name: Run Test 
        run: |
          docker run ${{ env.TAG }} /bin/bash -c "make clean; make all && make install"

  base-test-2:
    name: Test 2 Base
    runs-on: ubuntu-latest
    needs: base-build
    env:
      TAG: idris-base-${{ inputs.idris-version }}:test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      # mainly just for caching purposes - makes it faster to build later on
      - name: Build
        uses: ./.github/actions/build-image
        with:
          version: ${{ inputs.idris-version }}
          dockerfile: base
          repo: ${{ github.repository }}
          tag: ${{ env.TAG }}

      - name: Run Test
        run: |
          docker run ${{ env.TAG }} /bin/bash -c "make clean; make all; make test"


  # "consumer" images just "consume" the base image and do nothing else
  # basic tests for these
  consumer-build-test:
    name: Build Consumer - ${{ matrix.dockerfile }}
    runs-on: ubuntu-latest
    needs: [base-test-1, base-test-2]
    strategy:
      matrix:
        dockerfile: [ubuntu, debian]
    env:
      BASE_TAG: idris-base-${{ inputs.idris-version }}:base
      TAG: idris-consumer-${{ matrix.dockerfile }}-${{ inputs.idris-version }}:test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      
      - name: Build Base
        uses: ./.github/actions/build-image
        with:
          version: ${{ inputs.idris-version }}
          dockerfile: ${{ matrix.dockerfile }}
          repo: ${{ github.repository }}
          tag: ${{ env.BASE_TAG }}
      
      - name: Run `docker image ls`
        run: docker image ls

      - name: Build
        uses: ./.github/actions/build-image
        with:
          version: ${{ inputs.idris-version }}
          dockerfile: ${{ matrix.dockerfile }}
          repo: ${{ github.repository }}
          tag: ${{ env.TAG }}
          build-args: |
            BASE_IMG=${{ env.BASE_TAG }}

      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: '1.8.2'

      - name: Setup Bats libs
        uses: brokenpip3/setup-bats-libs@0.1.0
        with:
          support-version: 0.3.0
          assert-version: 2.1.0
          file-install: false
          detik-install: false

      # LIB_PATH is a env var I use in the setup() function of my bats tests
      # it points to the folder containing bats-assert and bats-support
      - name: Run Test
        run: |
          export LIB_PATH=/usr/lib/
          export DOCKER_IMAGE=${{ env.TAG }}
          bats tests/consumer-idris.bats
