name: Build and Test a Single Version

on:
  workflow_call:
    inputs:
      idris-version:
        required: true
        type: string

# Don't allow us to read from packages
permissions:
  contents: read

jobs:
  base-build:
    name: Build Base
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      
      - name: Set up SSH
        uses: MrSquaare/ssh-setup-action@v2
        with:
          host: ${{ secrets.SSH_IP }}
          private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          private-key-name: oracle-arm
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          append: |
            - endpoint: ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}

      - name: Test docker buildx
        run: docker buildx ls
      
      - name: Get Latest Idris Commit SHA
        id: get-sha
        uses: ./.github/actions/get-idris-sha

      # mainly just for caching purposes - makes it faster to build later on
      # build in arm (or my oracle server) as well so we can make the most use of our time in the build step
      - name: Build Base
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: base.Dockerfile
          build-args: | 
            IDRIS_VERSION=${{ inputs.idris-version }}
            IDRIS_SHA=${{ steps.get-sha.outputs.sha }}
          # When doing matrix builds, we need to scope the image
          # https://github.com/moby/buildkit/issues/2885
          cache-from: type=gha,scope=build-base-${{ inputs.idris-version }}
          cache-to: type=gha,mode=max,scope=build-base-${{ inputs.idris-version }}

  base-test-1:
    name: Test 1 Base
    runs-on: ubuntu-latest
    needs: base-build
    env:
      TAG: ghcr.io/${{ github.repository }}/base:${{ inputs.idris-version }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      # mainly just for caching purposes - makes it faster to build later on
      - name: Build
        uses: ./.github/actions/build-image
        with:
          version: ${{ inputs.idris-version }}
          dockerfile: base
          repo: ${{ github.repository }}
      
      - name: Setup Bats and Bats libs
        uses: brokenpip3/setup-bats-libs@1.5.1
        with:
          bats-version: '1.8.2'
          support-version: 0.3.0
          assert-version: 2.1.0
          file-install: false
          detik-install: false
  
      # LIB_PATH is a env var I use in the setup() function of my bats tests
      # it points to the folder containing bats-assert and bats-support
      - name: Run Test
        run: |
          export LIB_PATH=/usr/lib/
          export DOCKER_IMAGE=${{ env.TAG }}
          bats tests/base.bats

  base-test-2:
    name: Test 2 Base
    runs-on: ubuntu-latest
    needs: base-build
    env:
      TAG: idris-base-${{ inputs.idris-version }}:test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Get Latest Idris Commit SHA
        id: get-sha
        uses: ./.github/actions/get-idris-sha

      - name: Build Base
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          file: base.Dockerfile
          build-args: | 
            IDRIS_VERSION=${{ inputs.idris-version }}
            IDRIS_SHA=${{ steps.get-sha.outputs.sha }}
          tags: ${{ env.TAG }}
          load: true
          cache-from: type=gha,scope=build-base-${{ inputs.idris-version }}

      - name: Run Test
        run: |
          docker run ${{ env.TAG }} /bin/bash -c "make test"

  # "consumer" images just "consume" the base image and do nothing else
  # basic tests for these
  consumer-build-test-1:
    name: Build Consumer - ${{ matrix.dockerfile }}
    runs-on: ubuntu-latest
    needs: [base-test-1, base-test-2]
    strategy:
      matrix:
        dockerfile: [debian, ubuntu]
    # use a local registry
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    env:
      # use local registry so we can reference the base image in another dockerfile
      # https://github.com/docker/build-push-action/issues/738
      BASE_TAG: localhost:5000/base-${{ inputs.idris-version }}:latest
      TAG: idris-consumer-${{ matrix.dockerfile }}-${{ inputs.idris-version }}:test
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      
      - name: Setup Buildx (no ARM)
        uses: docker/setup-buildx-action@v2
        with:
          # since we're using a local registry
          driver-opts: network=host
        
      - name: Get Latest Idris Commit SHA
        id: get-sha
        uses: ./.github/actions/get-idris-sha

      - name: Build Base
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          file: base.Dockerfile
          build-args: | 
            IDRIS_VERSION=${{ inputs.idris-version }}
            IDRIS_SHA=${{ steps.get-sha.outputs.sha }}
          tags: ${{ env.BASE_TAG }}
          # push to local registry
          push: true
          cache-from: type=gha,scope=build-base-${{ inputs.idris-version }}

      - name: Run `docker image ls`
        run: docker image ls

      - name: Build ${{ matrix.dockerfile}}
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          file: ${{ matrix.dockerfile }}.Dockerfile
          build-args: | 
            IDRIS_VERSION=${{ inputs.idris-version }}
            BASE_IMG=${{ env.BASE_TAG }}
          tags: ${{ env.TAG }}
          load: true

      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: '1.8.2'

      - name: Setup Bats libs
        uses: brokenpip3/setup-bats-libs@0.1.0
        with:
          support-version: 0.3.0
          assert-version: 2.1.0
          file-install: false
          detik-install: false

      # LIB_PATH is a env var I use in the setup() function of my bats tests
      # it points to the folder containing bats-assert and bats-support
      - name: Run Test
        run: |
          export LIB_PATH=/usr/lib/
          export DOCKER_IMAGE=${{ env.TAG }}
          bats tests/consumer-idris.bats
